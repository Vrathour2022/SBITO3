
	Inside "java memory" an object would have
	its state and functionality

	Objects = physical state + behaviour(functionality)
	|		|		|
	water 		capacity	openIt() { }
	bottles		size		closeIt() { ]
	are		color
	objects		material
			brand
			shape
			weight

	cat		color		meow() {} 
			breed		chaseMice() { }
			weight		jump() { }
			height		snooze() { }
			age

	BankAccount	balance		deposit() {coding}
			acno		withdraw() { }
			acholder	getBalance() { }
			acopeningdate	transfer(){ }
			acholderaddress
			mobilenumber
			

		
		Java Programming Language


	apply for a bank account
	|
	register with the bank
	|
	bank admin would approve/reject your application
	based on the docs and other details
	|
	user would log in 
	|
	login portal - dash board 
				|

		see balance	payee	transfer
		statement	profile   logout


6 layers

1. Database design - Oracle
2. Plain Old Java Objects / java classes - Core Java
	BankAccount, Cashier, Payee 
	Address .....
3. DAO/Repositories - - Core Java + Spring
4. Service - business logic - Core Java
5. Controller - Spring 
6. UI - Angular

	7 Habits of Highly Effective People
	-----------------------------------

	1. Be ProActive
		act and influence

	2. Begin with "The End" in mind

	3. Put First Thing First


	4.

	5.
	
	6.

	7.



	Java Features
	--------------------
	1. plaform neutral
	

		Machine1	Machine2	Machine3
		|		|		|
  h/w		Intel/x86	Sun sparc	M1-chip
		|		|		|
  os		MS-Windows	Sun Solaris	Apple Mac
		|		|		|
  compiler	C++ Compiler -- C++ compiler	C++ compiler
		|		|		|
  sourcecode	First.cpp/.c  ->YES		YES
		|		|		|
  OBJECT	First.obj ----  First.o		First.o
		|		|		|
  Linker	First.exe ----- First.out	First.out

	
	Sun Microsystems
	1991
	GreenProject - James Gosling



		Machine1	Machine2	Machine3	Machine4
		|		|		|		|
  h/w		Intel/x86	Sun sparc	M1-chip		new chip
		|		|		|		|
  os		MS-Windows	Sun Solaris	Apple Mac	new os
		|		|		|		|
  compiler	JVM1		JVM2		JVM3		JVM4
		|CDPLAYER1	CDPLAYER2	CDPLAYER3	CDPLAYER4	CDPLAYER5	
  sourcecode	First.java	
		|		
  OBJECT	First.class	First.class	First.class	First.class
		(CD)
		Write Once Run Anywhere









	1. write your source code

	2. notepad Welcome.java
			|		
			class Greetings {  main.... }

	3. compile your source code
		javac Welcome.java

	4. run your class file which has the main method

		java Greetings









https://github.com/vishhaldawane/SBITO3/blob/main/Bank.java
	

	Naming Convention
	------------------
	1.ClassName	PascalCase	
			- DriverManager
			- ViewBalance
			- TransactionManagement

	2.methodName	- camelCase
			- setLookAndFeel()
			- openConnection()
			doTrip()		

	3.variableName	- camelCase
			rollNumber
			socialSecurityNumber
			adhaarCardNumber

	4. CONSTANT	- CAPITAL CASE
			MAX, MIN, AVG, NORM, PI,
			SPEED_OF_LIGHT

	5. packages	always in small case
			

		Data Types
			|
	----------------------------------
	|				|
	Primitive		  Secondary
	|
 --------------------------------
 |          |          |       |
Integral Floating  Character Boolean 
 |
byte  1 (8)
short 2 (16)
int   4 (32)
long  8 (64)


	byte 1 = 8 bits


	1 bit = 0	
		1

	2 bits =  0 0
		  0 1
		  1 0 
		  1 1

	3 bits = 8
		  000	0
		  001	1
		  010	2
		  011   3
		  100   4
		  101   5
		  110   6
		  111   7

	4 bits = 16
	5 bits = 32
	6 bits = 64
	7 bits = 128
	8 bits = 256
	9 bit = 512
	10	1024
	11	2048
	12	4096
	13	8192
	14	16384
	15	32767


	<---------------------dial of a byte------------>
	-128 -127 -125 .... -3 -2 -1 0 1 2 3 4....... 127













	Raja SriGanesh Vijay Nagarjun Sindhuri Dheeraj	Niranjan Priya Shruti	Ajay	Anand Hemant
Nidhi
Tuhin
RaviPrasad
	Vivek Chaitra Archana Janani Zainab Deepa  Neha Abhinav Tushar


	class = design of the object
	SavingsAccount 

	object = instance of a class
	SavingsAccount saObj = new SavingsAccount();

	Cat.java
	========
	class Cat
	{
		int age;
		String color; 

		void meow() { }
		void chaseMice() { }
	}
	
	class Test
	{
		public static void main(String str[])
		{
			Cat x = new Cat();
			Cat y = new Cat();
			Cat z = new Cat();
		}
	}

  ref	constructor
    |	     |
Cat x = new Cat();
Account a = new Account(101,"Smith",4000);
 |	|
class	allocator
   a.withdraw(500);
   a.deposit(4500);	

	stack				heap
	|				| (free store)

				DATA AREA OF CAT 

				age	color
				+---------------+
				|	|	|
				+---------------+
	   +------------------->500
	+--|-----+
	| 500	|
	+-------+		METHOD/FUNCTION AREA OF CAT
	x			meow() { } |  chaseMice() { }
	100


				age	color
				+---------------+
				|	|	|
				+---------------+
	   +------------------->600
	+--|-----+
	| 600	|
	+-------+		
	y			
	200


				age	color
				+---------------+
				|	|	|
				+---------------+
	   +------------------->700
	+--|-----+
	| 700	|
	+-------+		
	z			
	300


		baObj2.getBalance();
		|
		name mangling 
		|
		BankAccount.getBalance(baObj2);
		

				DATA AREA OF BankAccount

				account |account|account
				Number	|Holder |Balance
				+-----------------------+
				|	|	|	|	
				+-----------------------+
	   +------------------->100
	+--|-----+
	| 100	|
	+-------+		METHOD/FUNCTION AREA OF BankAccount
	baObj1			setBankAccount(...) { }
	500			printBankAccount(){}
				. withdraw(.) {} 
				. deposit(.) {} 
				. getBalance() { }
				
				account |account|account
				Number	|Holder |Balance
				+-----------------------+
				|	|	|	|	
				+-----------------------+
	   +------------------->200
	+--|-----+
	| 200	|
	+-------+		
	baObj2			
	600			



	Is "Sachin Tendulkar" an object? or class?


	class Player
	{
		int age;
		int rank;
		
	}	

	class SachinTendulkar
	{
		int age;

	}
	SachinTendulkar s = new SachinTendulkar();
	SachinTendulkar ss = new SachinTendulkar();
	SachinTendulkar sss = new SachinTendulkar();

	class Cricketer
	{
		int rank;
		String cricketerName;

		void setCricketer(int r, String c) {
			rank = r;
			cricketerName=c;
		}
	}

	class Test
	{
		main() {
			Cricketer x= new Cricketer();
			sachin.setCricketer(1,"Sachin Tendulkar");
		}
	}


	class DrawingArtist
	{
		void draw()
		{
		}
		void sketch() { }
		void paint() { }	
	}


	class Camera
	{
		void click()
		{
		}
	}

	class VideoCamera
	{
		void shooting() { }
	}

	class AnalogClock
	{		
		void tick() { }
	}

	invisible		visible
	thinking  + feeling = act + result
	1st			2nd


int age;
		int totalScore;
		float strikeRate;
		int numberOfODI;
		int numberOfTM;
		int numberOfCenturies;
		

class A
{
	A() {
		.......
	}
}

JPL -   provides a default constructor 
	it does nothing

	either you can have implicit or explicit
	but not  both

class Account
{
	int acno;
	String acname;
	double balance;
	float rate;
	Account(int acno, String acname, )
	{
		acno = a;
		acname = b;
		balance = c;
	}
}

class Joker
{
	Joker() //explicit no-arg constructor
	{
		System..sa.dfjldsafjsa
	}
}

	Account accObj1 = new Account();
	Account accObj2 = new Account();
	Account accObj3 = new Account();
	|	|	 |	  |	
	class	ref	allocator constructor			



			|		|
			to allocate	automatically
			the data	executed, post 
			structure	to new keyword
			for the 
			object

			it has the same name as of the 
			enclosing class
		
			it doesnot have return type

			it can take arguments

			it can be overloaded

	Constructor - it is used to initialize the data
			structure 

		
------------------------------------------------------------

Day 3


	POPS
	Procedure Oriented Programming System
	procedure<---data

	OOPS concepts
	--------
	Object Oriented Programming System
	data<---procedure


	imagine 
	a machine
	|
	cloth ----------->-->--->------->--->---- Shirt
			 |  |	|  	|	   |     
		measure() |  cutting()sewingM()	 delivery	
		|	make the   |    thread
		DS|pen	cutting	 scissor needle
		paper	diagram()		
		m-tape	|
			chalk
			scale



		{
			data <--- with which procedure/function
				it will have a contract?
			measure() <--initialize it
			makeCuttingDiagram() <--read it
		}

			cutting() { }
			sewing() { }
			delivery() { }
		







	ASSOCIATION OF THE DATA WITH ITS RELEVANT FUNCTION
	IS KNOWN AS CONTRACT OF A CLASS

	class Account
	{
		private double balance;
		private String mobileNumber;

		void withdraw(double a) { balance=balance-a; }
		void deposit(doubel a) { balance=balance+a;}
		double getBalance() { return balance; }
		
		void changeMobileNumber(String newNumber)
		{
			mobileNumber = newNumber;
		}
		String getMobileNumber() 
		{
			return mobileNumber;		
		}	
		void printBankAccount()
		{

		}
	}

	OOPS concepts


	1. Abstraction
		-it is "what is it?" part of an object
		-hiding the complexity of an object
		-it provides the functinality object
		the object via simple accessible functions
		
		a) data abstraction
		b) method abstraction
		c) class abstraction
		
	2. Encapsulation
		it is "how is it?" part of an object
		binding of data with "concerned functions"
			- keep the data as private

	3. Polymorphism

	ability of a business entity to have many forms

		a. class extension
		b. function overloading
			class Phone
			{
				void dial(byte b) { }
				void dial(byte b1, byte b2) { }
				void dial(String name) { }
				void dial(String name, String name2) { }
				void dial(byte b, String n) { }
				void dial(String n,byte b) { }

			}
		c. function overriding
		d. operator overloading
	

	4. Inheritance

		- ability of a business entity
		to "acquire" the properties of 
		"existing business entities"

		class Account
		{
			acno,name,bal
			wit,dep,getb,ctor
		}
		class SavingsAccount extends Account
		{
			[acno,name,bal] 
			rate	
			[wit,dep,getb,ctor]
			calcSi() { }
		}




	5. Object communication









	a. class extention

		
			Person
			   |
		--------------------------
			|		|
			Doctor		Engineer
			|
		------------------
		|
		Surgeon
		|
	-----------------
	|		|
	HeartSurgeon	NeuroSurgeon


	

		     Account
			|acno,name,balance
			| withdraw() { }
		---------------------------------------------
		|		|			|
	SavingsAccount		CurrentAccount	CreditAccount
		|rate		|overdraftLimit	
		|withdraw() { }	|
	FixedDepositAccount	|withdraw() { }
	|maturity
	|withdraw() { }



		1 Passing Object as Parameter
		2 Returning Object as Return Value

		void fun(int i)
		{
		}
	
		int add(int i, int j)
		{
			int k = i+j;
			return k;
		}



	isA - 
		class Machine
		{
		}
		class WashingMachine extends Machine
		{
			void wash(Cloth c)
			{

			}
		}
		class Test
		{
			main() {

				Cloth x = new Cloth();
				moon(x);
				..
				..
			}
			Account moon(Cloth y )
			{
				y.somechanges

				Account a=new Account();
				return a;
			}
		}

		class Cloth { 
			String fabric; String color; float cost; 
		}



		stack			heap

				fabric	color	cost
				--------------------------
				|	|	|	|
				--------------------------

		+--------------->100
		|		|
		100 <-- value	|
main		x		|
-----------------------------------------------------------------
				|
moon		+---------------+
		|
		100
		y


				WashingMachine wm = new WashingMachine();





	Four Types of class relationship

		

		ASSOCIATION
		   |
	+-----------------------+
	|	|	|	|
	isA	hasA	usesA	producesA
	|	|
aggregation	composition

		class Machine { }
		class WashingMachine extends Machine //isA
		{
			WashingTub wt = new WashingTub(); //hasA

			producesA   usesA   usesA   usesA      		usesA
			|		|	|	|		|	
			Laundry wash(Cloth c, Water w, Electricity e, WashingPowder wp)
			{

			}

		}

	class Account { }
	class SavingsAccount extends Account {
		acno
		name
		balance
		Statement st = new Statement();
		Payee payee = new Payee();
		Permission p = new Permission();
	}
		

	class Tub { }
	class WashingTub extends Tub { }

	class Powder { }
	class TalcumPowder extends Powder { }
	class WashingPowder extends Powder { }

	class Water{ }
	class HardWater extends Water { }
	class SoftWater extends Water { }
	










	class Heart
	{
		void pumping(){ }
	}
	class Kidney {

	}

	class Mammal { }
	class Human extends Mammal
	{
		Heart h= new Heart(); //hasA
		Kidney lk = new Kidney(); //hasA
		Kidney rk = new Kidney(); //hasA
	}

	class Singer extends Human
	{
		Song sing(Lyrics l, Music m)
		{
			Song s = new Song(....l...m...);
			s.fun(l);
			return s;
		}
	}

	class Magician extends Human
	{
		Magic doTrick(ScientificExperiment se)
		{
			Magic m = new Magic();
			return m;
		}
	}

	class Camera { 
		void zoomIn() { }
		void zoomOut() { }
	}
	class DSLRCamera extends Camera //isA
	{
		Lens l = new Lens();

		Photo click(Scene s) {

		}
	}
	class VideoCamera extends DSLRCamera 
	{
		Lens l = new Lens();

		Photo click(Scene s) {

		}
		Video shoot(Scene s) {
			...		
			...
			Photo p = click(s);		
			...
		}
	}






		

			Association
				|
		---------------------------------
		|	|	|	|
		isA	hasA	usesA	producesA

	class Object { }
		|
	class Person { 
		PanCard p = new PanCard();

	}
	class Student extends Person { 
		ReportCard r = new ReportCard();

	}
	class Employee extends Student { 
		SalarySlip s= new SalarySlip();

		Object typeMessage(Phone p)
		{
			p.
		}

	}


	this.  - refers to the current class data / function
	this() - refers to the current class constructor

	super.  - refers to the nearest superclass data / function
	super() - refers to the nearest superclass constructor


	BankAdmin object should perform following activities

		1. change mobile number in account object
		2. change account holder name in account object
		3. deposit amount in account object
		4. withdraw amount from account object
	


	class Weapon
	{
	}
	class Gun extends Weapon
	{
		Bullet fire() {
		}
	}
	

			field		method		class
	--------------------------------------------------------
	static		shared		to deal
			data across	with other
			the objects	static
					members
	--------------------------------------------------------	
	final
	--------------------------------------------------------
	abstract
	--------------------------------------------------------



	static is known as class's data

	it is not of object's data


--------------------

static polymorphism X
dynamic polymorphism X

		Overloading
		----------------
			compile time binding
			early binding
			a.withdraw(500);
			a.withdraw(500,700);
			s.withdraw(500);
			s.withdraw(500,700);
			f.withdraw(500);
			f.withdraw(500,700);

		Overriding
		-----------
			runtime binding
			late binding
			ref=?
			ref.withdraw(500);
			ref=?
			ref.withdraw(500);





	

		Object
		|
	1	toString
	2	getClass

	3	clone
	4	finalize

	5	equals
	6	hashCode

	7	notify()
	8	notifyAll()
	9	wait
	10	wait
	11	wait



	abstract class 
	---------------
		
		is a partial contract of a class
		
	abstract class GeometricalShape
	{
		abstract void draw();
		abstract void calcArea();
		abstract void calcPeriphery();
	}

	class Circle extends GeometricalShape
	{
		int rad;
		void draw(){..}
		void calcArea(){..}
		void calcPeriphery(){..}
	}
	class Ellipse extends Circle
	{
		int rad2;

	}

	class Square
	{
		int i;
	
		void draw(){..}
		void calcArea(){..}
		void calcPeriphery(){..}
	}
	class Rectangle extends Square
	{
		int j;
		void draw(){..}
		void calcArea(){..}
		void calcPeriphery(){..}
	}













1	Instrument (Compass, Tape, The tel....
2	MusicalInstrument (Drum, Piano, Saxophone, Flute ..)
	MedicalInstrument 
3	StringBasedMusicalInstrument (Sitar,Violin,Veena,Guitar)
4	Guitar	
5	ElectronicGuitar


1			   Instrument
				|utilize();
		-----------------------------------
		|				|
2	MusicalInstrument		MedicalInstrument		
		|play();			|diagnose();
	-------------------		-------------------
	|		|		|		|
3 StringBased	   AirBased	     SurgicalMedical	Pathalogical
 MusicalInstrument  MusicalInstrument MedicalInstrument	MedicalInstrument
	|tuneStr();	  |blow();	   |sterilize	 |read(); electricitySupply();scan();
-----------------	----------------  ---------	------------------
|	|	|	|   |	       |   |      |  	|    	   |	|
4 Guitar Violin  Sitar Flute Saxophone Bag Needle Cutter GlucoMeter MRI	CTScanner
  |	    |			      Pipe
5 Electronic Cello
Guitar				    

2. innovate final keyword, field, method, class
3. innovate method overriding 
4. appply association in - TestOverrideAgain.java
	
			inheritance
			|
		------------------------
		|			|
	derivation		implementation
				(mandates)
				abtract/interfaces
	A			A	I
	|			|	|
	B			B	B
	Account
	|withdraw(){}
	Savings
	|withdraw(){}

	abstract class
		partial contract of a class
		it may have abstract methods

		it may have non-abstract methods too

	interface
	----------
		"pure partial" contract of a class

	
	The fundamental unit of JPL is to write  class
	The fundamental unit of OOPS is to write  a pure type

	interface Reactive
	{
		void react();
	}
	interface Responsive
	{
		void reponse();
	}
	interface Proactive
	{
		void proact();
	}
	class Person extends Human implements Reactive, Responsive, Proactive
	{

	}	











	single

	A
	|
	B

	multi level

	A
	|
	B
	|
	C


	multiple level
	
	Object		P(i)
	|11		|5		
	X	 A(i)	Q(c) <-- not possible
	|5+3(a)  |3	|5
	Y(c)	 B(i)	R(i)
	|6	 |5	|5
	-----------------
	|
	Z(45+5)
	|
	D
	

		Z z =new Z();
		R r = new Z();
		Q q = new Z();

	




	Packages and Access Specifiers

	


		Packages = directories/folders
		|		|
		java		operating system

	jungle.river		jungle\river
	jungle.cave		jungle\cave
	jungle.tree		jungle\tree

		to organize the relevant classes 

		PackageProject
			|
		------------------------------------------------------------
			|					|
			src					bin
			|					|
			jungle <-- main folder			jungle
			|					|
	--------------------------------------			--------------
	|	|	|	|					|
	river	cave	tree	use	 <--- child folders		river
	|	|	|	|					|
      Fish	|	|	|
  Crocodile	Tiger  Parrot	TestProgram			Crocodiel.class
  Allegator	Lion   Monkey	  main() { 
  |	   WhiteTiger    jump(){}	Monkey m = new Monkey();	
 crawl()	|			m.jump();
		roar(){}
   |
Crocodile.java
-------------
package jungle.river; <-- must be the first statement 
class Crocodile { }

Allegator.java
---------------
package jungle.river;
class Allegator


TestProgram.java
----------------
package jungle.use;

import jungle.river.Crocodile;
import jungle.river.Allegator;
import jungle.cave.Tiger;
import jungle.tree.Monkey;

class TestProgram
{
	main() {
		Crocodile c = new Crocodile();
		Allegator a = new Allegator();
	}
}

  





		1.         <-- it is known as default
			   <-- it is available only in that
				 folder
		2. public <-- available to the internet
		3. private <-- only within the class body

		4. protected
			|
	--------------------------------------------------------------
	|river		|river			|cave		|tree
	in the same	in the same		in the diff	in the diff
	pacakge		package			package		pacakge
	|		|			|		|
	to the child	to the non-child	to the child	to the non-child
	|		|			|		|
	Allegator	Fish			Allegator	Fish 
								(not accessible)
















